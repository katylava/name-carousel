import { useEffect, useState } from 'react';
import { generateCarouselName } from '../utils/carouselNameGenerator';

export function EnterNames({ names, setNames, drawName, setDrawName }) {
  const [textareaValue, setTextareaValue] = useState('');
  const [isEditingName, setIsEditingName] = useState(false);
  const [duplicateName, setDuplicateName] = useState(null);

  // Initialize draw name with random circus name if not set
  useEffect(() => {
    if (!drawName) {
      const generatedName = generateCarouselName();
      setDrawName(generatedName);
      localStorage.setItem('drawName', generatedName);
    }
  }, [drawName, setDrawName]);

  useEffect(() => {
    const savedNames = localStorage.getItem('names');
    if (savedNames) {
      // Always sync textarea with localStorage when component mounts or names change from parent
      if (textareaValue === '' || names.length === 0) {
        setTextareaValue(savedNames);
        const namesList = savedNames.split('\n').filter(name => name.trim());
        /* istanbul ignore next */
        if (names.length === 0) {
          setNames(namesList); // Defensive: Steps.js usually loads names first
        }
      }
    }
  }, [names, setNames, textareaValue]);

  const handleNamesChange = e => {
    const newValue = e.target.value;
    setTextareaValue(newValue);

    // Only update the names array for processing, but keep the raw textarea value
    const namesList = newValue.split('\n').filter(name => name.trim());

    // Check for duplicates
    const nameCounts = {};
    let foundDuplicate = null;

    for (const name of namesList) {
      if (nameCounts[name]) {
        foundDuplicate = name;
        break;
      }
      nameCounts[name] = 1;
    }

    setDuplicateName(foundDuplicate);
    setNames(namesList);
    localStorage.setItem('names', newValue);
  };

  const handleDrawNameChange = e => {
    const newName = e.target.value;
    setDrawName(newName);
    localStorage.setItem('drawName', newName);
  };

  const handleNameClick = () => {
    setIsEditingName(true);
  };

  const handleNameBlur = () => {
    setIsEditingName(false);
    // Empty drawNames are auto-regenerated by useEffect
  };

  const handleNameKeyDown = e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      setIsEditingName(false);
      // Empty drawNames are auto-regenerated by useEffect
    }
  };

  return (
    <>
      <div className="carousel-name-section">
        {isEditingName ? (
          <input
            type="text"
            value={drawName}
            onChange={handleDrawNameChange}
            onBlur={handleNameBlur}
            onKeyDown={handleNameKeyDown}
            className="carousel-name-input"
            autoFocus
          />
        ) : (
          <div className="carousel-name-display" onClick={handleNameClick}>
            <h3 className="carousel-name-title">{drawName}</h3>
            <span className="edit-icon">✏️</span>
          </div>
        )}
      </div>

      <h2>
        Enter names{' '}
        <span
          style={{
            fontSize: '0.6em',
            fontWeight: 'normal',
            color: 'var(--text-secondary)',
          }}
        >
          (one per line)
        </span>
      </h2>
      {duplicateName && (
        <div className="duplicate-name-error">
          Duplicate name detected: {duplicateName}
        </div>
      )}
      <textarea
        id="names"
        placeholder="Enter names here, one per line"
        rows="20"
        value={textareaValue}
        onChange={handleNamesChange}
        className={`names-textarea${duplicateName ? ' error' : ''}`}
      />
    </>
  );
}
